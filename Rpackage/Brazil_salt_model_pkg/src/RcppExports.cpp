// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// tableRcpp
IntegerVector tableRcpp(SEXP x);
RcppExport SEXP _BrazilSaltModelmisc_tableRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tableRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// counts
IntegerVector counts(SEXP x);
RcppExport SEXP _BrazilSaltModelmisc_counts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(counts(x));
    return rcpp_result_gen;
END_RCPP
}
// fquantile
NumericVector fquantile(NumericVector x, NumericVector probs, bool na_rm);
RcppExport SEXP _BrazilSaltModelmisc_fquantile(SEXP xSEXP, SEXP probsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile(x, probs, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fquantile_byid
List fquantile_byid(NumericVector x, NumericVector q, StringVector id, bool rounding, bool na_rm);
RcppExport SEXP _BrazilSaltModelmisc_fquantile_byid(SEXP xSEXP, SEXP qSEXP, SEXP idSEXP, SEXP roundingSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< StringVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< bool >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile_byid(x, q, id, rounding, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fbound
NumericVector fbound(const NumericVector& x, NumericVector& a, NumericVector& b);
RcppExport SEXP _BrazilSaltModelmisc_fbound(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fbound_int
IntegerVector fbound_int(const IntegerVector& x, IntegerVector& a, IntegerVector& b);
RcppExport SEXP _BrazilSaltModelmisc_fbound_int(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound_int(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fbound_inplace
NumericVector fbound_inplace(NumericVector x, NumericVector& a, NumericVector& b);
RcppExport SEXP _BrazilSaltModelmisc_fbound_inplace(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound_inplace(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fbound_inplace_int
IntegerVector fbound_inplace_int(IntegerVector x, IntegerVector& a, IntegerVector& b);
RcppExport SEXP _BrazilSaltModelmisc_fbound_inplace_int(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound_inplace_int(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fequal
LogicalVector fequal(NumericVector x, double tol);
RcppExport SEXP _BrazilSaltModelmisc_fequal(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fequal(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// fnormalise
NumericVector fnormalise(const NumericVector& x);
RcppExport SEXP _BrazilSaltModelmisc_fnormalise(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fnormalise(x));
    return rcpp_result_gen;
END_RCPP
}
// fcompress
NumericVector fcompress(const NumericVector& x, float limit);
RcppExport SEXP _BrazilSaltModelmisc_fcompress(SEXP xSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type limit(limitSEXP);
    rcpp_result_gen = Rcpp::wrap(fcompress(x, limit));
    return rcpp_result_gen;
END_RCPP
}
// roll_mean_left
NumericVector roll_mean_left(const NumericVector& dat, int window);
RcppExport SEXP _BrazilSaltModelmisc_roll_mean_left(SEXP datSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_mean_left(dat, window));
    return rcpp_result_gen;
END_RCPP
}
// shift_byidNum
NumericVector shift_byidNum(const NumericVector& x, int lag, float replace, IntegerVector id);
RcppExport SEXP _BrazilSaltModelmisc_shift_byidNum(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< float >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_byidNum(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_byidInt
IntegerVector shift_byidInt(const IntegerVector& x, int lag, int replace, IntegerVector id);
RcppExport SEXP _BrazilSaltModelmisc_shift_byidInt(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_byidInt(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_byidStr
StringVector shift_byidStr(const CharacterVector& x, int lag, std::string replace, IntegerVector id);
RcppExport SEXP _BrazilSaltModelmisc_shift_byidStr(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< std::string >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_byidStr(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// sort_byidInt
IntegerVector sort_byidInt(const IntegerVector& x, IntegerVector id);
RcppExport SEXP _BrazilSaltModelmisc_sort_byidInt(SEXP xSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_byidInt(x, id));
    return rcpp_result_gen;
END_RCPP
}
// sort_byidNum
NumericVector sort_byidNum(const NumericVector& x, IntegerVector id);
RcppExport SEXP _BrazilSaltModelmisc_sort_byidNum(SEXP xSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_byidNum(x, id));
    return rcpp_result_gen;
END_RCPP
}
// df2mat_numeric
NumericMatrix df2mat_numeric(const DataFrame& x);
RcppExport SEXP _BrazilSaltModelmisc_df2mat_numeric(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(df2mat_numeric(x));
    return rcpp_result_gen;
END_RCPP
}
// df2mat_integer
IntegerMatrix df2mat_integer(const DataFrame& x);
RcppExport SEXP _BrazilSaltModelmisc_df2mat_integer(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(df2mat_integer(x));
    return rcpp_result_gen;
END_RCPP
}
// collect_output
IntegerVector collect_output(const IntegerVector& m1, const IntegerVector& m2, const IntegerVector& m3, const NumericVector& d1, const IntegerVector& p1, const IntegerVector& p2, const IntegerVector& p3, const IntegerVector& id);
RcppExport SEXP _BrazilSaltModelmisc_collect_output(SEXP m1SEXP, SEXP m2SEXP, SEXP m3SEXP, SEXP d1SEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP p3SEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type m3(m3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type p3(p3SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(collect_output(m1, m2, m3, d1, p1, p2, p3, id));
    return rcpp_result_gen;
END_RCPP
}
// my_pBCPEo
NumericVector my_pBCPEo(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const int& n_cpu);
RcppExport SEXP _BrazilSaltModelmisc_my_pBCPEo(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pBCPEo(q, mu, sigma, nu, tau, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBCPEo
NumericVector my_qBCPEo(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const int& n_cpu);
RcppExport SEXP _BrazilSaltModelmisc_my_qBCPEo(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBCPEo(p, mu, sigma, nu, tau, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBCPEo_trunc
NumericVector my_qBCPEo_trunc(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const double& lower_lim, const double& upper_lim, const int& n_cpu);
RcppExport SEXP _BrazilSaltModelmisc_my_qBCPEo_trunc(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_limSEXP, SEXP upper_limSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower_lim(lower_limSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper_lim(upper_limSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBCPEo_trunc(p, mu, sigma, nu, tau, lower_lim, upper_lim, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pBCT
NumericVector my_pBCT(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const int& n_cpu);
RcppExport SEXP _BrazilSaltModelmisc_my_pBCT(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pBCT(q, mu, sigma, nu, tau, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBCT
NumericVector my_qBCT(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const int& n_cpu);
RcppExport SEXP _BrazilSaltModelmisc_my_qBCT(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBCT(p, mu, sigma, nu, tau, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBCT_trunc
NumericVector my_qBCT_trunc(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const double& lower_lim, const double& upper_lim, const int& n_cpu);
RcppExport SEXP _BrazilSaltModelmisc_my_qBCT_trunc(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_limSEXP, SEXP upper_limSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower_lim(lower_limSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper_lim(upper_limSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBCT_trunc(p, mu, sigma, nu, tau, lower_lim, upper_lim, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_runif_seeded
NumericVector my_runif_seeded(const int& n, const double& lower_bound, const double& upper_bound, const int& seed);
RcppExport SEXP _BrazilSaltModelmisc_my_runif_seeded(SEXP nSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(my_runif_seeded(n, lower_bound, upper_bound, seed));
    return rcpp_result_gen;
END_RCPP
}
// my_runif
NumericVector my_runif(const int& n, const double& lower_bound, const double& upper_bound);
RcppExport SEXP _BrazilSaltModelmisc_my_runif(SEXP nSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper_bound(upper_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(my_runif(n, lower_bound, upper_bound));
    return rcpp_result_gen;
END_RCPP
}
// mk_new_simulant_markers
LogicalVector mk_new_simulant_markers(const IntegerVector& pid);
RcppExport SEXP _BrazilSaltModelmisc_mk_new_simulant_markers(SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_new_simulant_markers(pid));
    return rcpp_result_gen;
END_RCPP
}
// incidence_type_1
IntegerVector incidence_type_1(const IntegerVector& year, const LogicalVector& is_new_simulant, const NumericVector& prob, const IntegerVector& prevalence, const int init_year);
RcppExport SEXP _BrazilSaltModelmisc_incidence_type_1(SEXP yearSEXP, SEXP is_new_simulantSEXP, SEXP probSEXP, SEXP prevalenceSEXP, SEXP init_yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_new_simulant(is_new_simulantSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prevalence(prevalenceSEXP);
    Rcpp::traits::input_parameter< const int >::type init_year(init_yearSEXP);
    rcpp_result_gen = Rcpp::wrap(incidence_type_1(year, is_new_simulant, prob, prevalence, init_year));
    return rcpp_result_gen;
END_RCPP
}
// incidence_type_2
IntegerVector incidence_type_2(const IntegerVector& year, const LogicalVector& is_new_simulant, const NumericVector& prob, const NumericVector& rn, const IntegerVector& prevalence, const int init_year);
RcppExport SEXP _BrazilSaltModelmisc_incidence_type_2(SEXP yearSEXP, SEXP is_new_simulantSEXP, SEXP probSEXP, SEXP rnSEXP, SEXP prevalenceSEXP, SEXP init_yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_new_simulant(is_new_simulantSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rn(rnSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prevalence(prevalenceSEXP);
    Rcpp::traits::input_parameter< const int >::type init_year(init_yearSEXP);
    rcpp_result_gen = Rcpp::wrap(incidence_type_2(year, is_new_simulant, prob, rn, prevalence, init_year));
    return rcpp_result_gen;
END_RCPP
}
// incidence_type_3
DataFrame incidence_type_3(const IntegerVector& year, const LogicalVector& is_new_simulant, const NumericVector& t2dm_prob, const NumericVector& t2dm_rn, const IntegerVector& t2dm_prvl, const NumericVector& t2dm_cvd_multiplier, const NumericVector& chd_prob, const NumericVector& chd_rn, const IntegerVector& chd_prvl, const NumericVector& stroke_prob, const NumericVector& stroke_rn, const IntegerVector& stroke_prvl, const NumericVector& cvd_t2dm_multiplier, const int t2dm_lag, const int cvd_lag, const int init_year);
RcppExport SEXP _BrazilSaltModelmisc_incidence_type_3(SEXP yearSEXP, SEXP is_new_simulantSEXP, SEXP t2dm_probSEXP, SEXP t2dm_rnSEXP, SEXP t2dm_prvlSEXP, SEXP t2dm_cvd_multiplierSEXP, SEXP chd_probSEXP, SEXP chd_rnSEXP, SEXP chd_prvlSEXP, SEXP stroke_probSEXP, SEXP stroke_rnSEXP, SEXP stroke_prvlSEXP, SEXP cvd_t2dm_multiplierSEXP, SEXP t2dm_lagSEXP, SEXP cvd_lagSEXP, SEXP init_yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_new_simulant(is_new_simulantSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2dm_prob(t2dm_probSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2dm_rn(t2dm_rnSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type t2dm_prvl(t2dm_prvlSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2dm_cvd_multiplier(t2dm_cvd_multiplierSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type chd_prob(chd_probSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type chd_rn(chd_rnSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type chd_prvl(chd_prvlSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stroke_prob(stroke_probSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stroke_rn(stroke_rnSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type stroke_prvl(stroke_prvlSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cvd_t2dm_multiplier(cvd_t2dm_multiplierSEXP);
    Rcpp::traits::input_parameter< const int >::type t2dm_lag(t2dm_lagSEXP);
    Rcpp::traits::input_parameter< const int >::type cvd_lag(cvd_lagSEXP);
    Rcpp::traits::input_parameter< const int >::type init_year(init_yearSEXP);
    rcpp_result_gen = Rcpp::wrap(incidence_type_3(year, is_new_simulant, t2dm_prob, t2dm_rn, t2dm_prvl, t2dm_cvd_multiplier, chd_prob, chd_rn, chd_prvl, stroke_prob, stroke_rn, stroke_prvl, cvd_t2dm_multiplier, t2dm_lag, cvd_lag, init_year));
    return rcpp_result_gen;
END_RCPP
}
// mortality_type_1
IntegerVector mortality_type_1(const IntegerVector& year, const LogicalVector& is_new_simulant, const NumericVector& prob, const NumericVector& rn, const IntegerVector& prevalence, const int init_year, const int cod);
RcppExport SEXP _BrazilSaltModelmisc_mortality_type_1(SEXP yearSEXP, SEXP is_new_simulantSEXP, SEXP probSEXP, SEXP rnSEXP, SEXP prevalenceSEXP, SEXP init_yearSEXP, SEXP codSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_new_simulant(is_new_simulantSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rn(rnSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prevalence(prevalenceSEXP);
    Rcpp::traits::input_parameter< const int >::type init_year(init_yearSEXP);
    Rcpp::traits::input_parameter< const int >::type cod(codSEXP);
    rcpp_result_gen = Rcpp::wrap(mortality_type_1(year, is_new_simulant, prob, rn, prevalence, init_year, cod));
    return rcpp_result_gen;
END_RCPP
}
// mortality_type_2
DataFrame mortality_type_2(const IntegerVector& year, const LogicalVector& is_new_simulant, const NumericVector& prob, const NumericVector& rn, const IntegerVector& diagnosed, const IntegerVector& prevalence, const int init_year, const int cod, const int cure);
RcppExport SEXP _BrazilSaltModelmisc_mortality_type_2(SEXP yearSEXP, SEXP is_new_simulantSEXP, SEXP probSEXP, SEXP rnSEXP, SEXP diagnosedSEXP, SEXP prevalenceSEXP, SEXP init_yearSEXP, SEXP codSEXP, SEXP cureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_new_simulant(is_new_simulantSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rn(rnSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diagnosed(diagnosedSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prevalence(prevalenceSEXP);
    Rcpp::traits::input_parameter< const int >::type init_year(init_yearSEXP);
    Rcpp::traits::input_parameter< const int >::type cod(codSEXP);
    Rcpp::traits::input_parameter< const int >::type cure(cureSEXP);
    rcpp_result_gen = Rcpp::wrap(mortality_type_2(year, is_new_simulant, prob, rn, diagnosed, prevalence, init_year, cod, cure));
    return rcpp_result_gen;
END_RCPP
}
// mortality_resolve
IntegerVector mortality_resolve(const IntegerVector& year, const LogicalVector& is_new_simulant, const IntegerVector& cod1, const IntegerVector& cod2, const IntegerVector& cod3, const NumericVector& rn, int init_year);
RcppExport SEXP _BrazilSaltModelmisc_mortality_resolve(SEXP yearSEXP, SEXP is_new_simulantSEXP, SEXP cod1SEXP, SEXP cod2SEXP, SEXP cod3SEXP, SEXP rnSEXP, SEXP init_yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_new_simulant(is_new_simulantSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cod1(cod1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cod2(cod2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cod3(cod3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rn(rnSEXP);
    Rcpp::traits::input_parameter< int >::type init_year(init_yearSEXP);
    rcpp_result_gen = Rcpp::wrap(mortality_resolve(year, is_new_simulant, cod1, cod2, cod3, rn, init_year));
    return rcpp_result_gen;
END_RCPP
}
// morbidity_resolve
CharacterVector morbidity_resolve(const IntegerVector& year, const IntegerVector& disease1, const IntegerVector& disease2, const IntegerVector& death, const CharacterVector& disease_names, const CharacterVector& cod_names, int init_year);
RcppExport SEXP _BrazilSaltModelmisc_morbidity_resolve(SEXP yearSEXP, SEXP disease1SEXP, SEXP disease2SEXP, SEXP deathSEXP, SEXP disease_namesSEXP, SEXP cod_namesSEXP, SEXP init_yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type disease1(disease1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type disease2(disease2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type death(deathSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type disease_names(disease_namesSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type cod_names(cod_namesSEXP);
    Rcpp::traits::input_parameter< int >::type init_year(init_yearSEXP);
    rcpp_result_gen = Rcpp::wrap(morbidity_resolve(year, disease1, disease2, death, disease_names, cod_names, init_year));
    return rcpp_result_gen;
END_RCPP
}
// count_if
int count_if(LogicalVector x, bool na_rm);
RcppExport SEXP _BrazilSaltModelmisc_count_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(count_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// prop_if
double prop_if(LogicalVector x, bool na_rm);
RcppExport SEXP _BrazilSaltModelmisc_prop_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(prop_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fscramble_trajectories
NumericVector fscramble_trajectories(const NumericVector& x, const IntegerVector& pid, const double& jump);
RcppExport SEXP _BrazilSaltModelmisc_fscramble_trajectories(SEXP xSEXP, SEXP pidSEXP, SEXP jumpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< const double& >::type jump(jumpSEXP);
    rcpp_result_gen = Rcpp::wrap(fscramble_trajectories(x, pid, jump));
    return rcpp_result_gen;
END_RCPP
}
// identify_longdeads
LogicalVector identify_longdeads(const IntegerVector& x, const LogicalVector& pid);
RcppExport SEXP _BrazilSaltModelmisc_identify_longdeads(SEXP xSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_longdeads(x, pid));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BrazilSaltModelmisc_tableRcpp", (DL_FUNC) &_BrazilSaltModelmisc_tableRcpp, 1},
    {"_BrazilSaltModelmisc_counts", (DL_FUNC) &_BrazilSaltModelmisc_counts, 1},
    {"_BrazilSaltModelmisc_fquantile", (DL_FUNC) &_BrazilSaltModelmisc_fquantile, 3},
    {"_BrazilSaltModelmisc_fquantile_byid", (DL_FUNC) &_BrazilSaltModelmisc_fquantile_byid, 5},
    {"_BrazilSaltModelmisc_fbound", (DL_FUNC) &_BrazilSaltModelmisc_fbound, 3},
    {"_BrazilSaltModelmisc_fbound_int", (DL_FUNC) &_BrazilSaltModelmisc_fbound_int, 3},
    {"_BrazilSaltModelmisc_fbound_inplace", (DL_FUNC) &_BrazilSaltModelmisc_fbound_inplace, 3},
    {"_BrazilSaltModelmisc_fbound_inplace_int", (DL_FUNC) &_BrazilSaltModelmisc_fbound_inplace_int, 3},
    {"_BrazilSaltModelmisc_fequal", (DL_FUNC) &_BrazilSaltModelmisc_fequal, 2},
    {"_BrazilSaltModelmisc_fnormalise", (DL_FUNC) &_BrazilSaltModelmisc_fnormalise, 1},
    {"_BrazilSaltModelmisc_fcompress", (DL_FUNC) &_BrazilSaltModelmisc_fcompress, 2},
    {"_BrazilSaltModelmisc_roll_mean_left", (DL_FUNC) &_BrazilSaltModelmisc_roll_mean_left, 2},
    {"_BrazilSaltModelmisc_shift_byidNum", (DL_FUNC) &_BrazilSaltModelmisc_shift_byidNum, 4},
    {"_BrazilSaltModelmisc_shift_byidInt", (DL_FUNC) &_BrazilSaltModelmisc_shift_byidInt, 4},
    {"_BrazilSaltModelmisc_shift_byidStr", (DL_FUNC) &_BrazilSaltModelmisc_shift_byidStr, 4},
    {"_BrazilSaltModelmisc_sort_byidInt", (DL_FUNC) &_BrazilSaltModelmisc_sort_byidInt, 2},
    {"_BrazilSaltModelmisc_sort_byidNum", (DL_FUNC) &_BrazilSaltModelmisc_sort_byidNum, 2},
    {"_BrazilSaltModelmisc_df2mat_numeric", (DL_FUNC) &_BrazilSaltModelmisc_df2mat_numeric, 1},
    {"_BrazilSaltModelmisc_df2mat_integer", (DL_FUNC) &_BrazilSaltModelmisc_df2mat_integer, 1},
    {"_BrazilSaltModelmisc_collect_output", (DL_FUNC) &_BrazilSaltModelmisc_collect_output, 8},
    {"_BrazilSaltModelmisc_my_pBCPEo", (DL_FUNC) &_BrazilSaltModelmisc_my_pBCPEo, 6},
    {"_BrazilSaltModelmisc_my_qBCPEo", (DL_FUNC) &_BrazilSaltModelmisc_my_qBCPEo, 6},
    {"_BrazilSaltModelmisc_my_qBCPEo_trunc", (DL_FUNC) &_BrazilSaltModelmisc_my_qBCPEo_trunc, 8},
    {"_BrazilSaltModelmisc_my_pBCT", (DL_FUNC) &_BrazilSaltModelmisc_my_pBCT, 6},
    {"_BrazilSaltModelmisc_my_qBCT", (DL_FUNC) &_BrazilSaltModelmisc_my_qBCT, 6},
    {"_BrazilSaltModelmisc_my_qBCT_trunc", (DL_FUNC) &_BrazilSaltModelmisc_my_qBCT_trunc, 8},
    {"_BrazilSaltModelmisc_my_runif_seeded", (DL_FUNC) &_BrazilSaltModelmisc_my_runif_seeded, 4},
    {"_BrazilSaltModelmisc_my_runif", (DL_FUNC) &_BrazilSaltModelmisc_my_runif, 3},
    {"_BrazilSaltModelmisc_mk_new_simulant_markers", (DL_FUNC) &_BrazilSaltModelmisc_mk_new_simulant_markers, 1},
    {"_BrazilSaltModelmisc_incidence_type_1", (DL_FUNC) &_BrazilSaltModelmisc_incidence_type_1, 5},
    {"_BrazilSaltModelmisc_incidence_type_2", (DL_FUNC) &_BrazilSaltModelmisc_incidence_type_2, 6},
    {"_BrazilSaltModelmisc_incidence_type_3", (DL_FUNC) &_BrazilSaltModelmisc_incidence_type_3, 16},
    {"_BrazilSaltModelmisc_mortality_type_1", (DL_FUNC) &_BrazilSaltModelmisc_mortality_type_1, 7},
    {"_BrazilSaltModelmisc_mortality_type_2", (DL_FUNC) &_BrazilSaltModelmisc_mortality_type_2, 9},
    {"_BrazilSaltModelmisc_mortality_resolve", (DL_FUNC) &_BrazilSaltModelmisc_mortality_resolve, 7},
    {"_BrazilSaltModelmisc_morbidity_resolve", (DL_FUNC) &_BrazilSaltModelmisc_morbidity_resolve, 7},
    {"_BrazilSaltModelmisc_count_if", (DL_FUNC) &_BrazilSaltModelmisc_count_if, 2},
    {"_BrazilSaltModelmisc_prop_if", (DL_FUNC) &_BrazilSaltModelmisc_prop_if, 2},
    {"_BrazilSaltModelmisc_fscramble_trajectories", (DL_FUNC) &_BrazilSaltModelmisc_fscramble_trajectories, 3},
    {"_BrazilSaltModelmisc_identify_longdeads", (DL_FUNC) &_BrazilSaltModelmisc_identify_longdeads, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BrazilSaltModelmisc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
